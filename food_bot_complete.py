import logging
import json
import os
import sqlite3
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import speech_recognition as sr
from pydub import AudioSegment
import io
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

class FoodBot:
    def __init__(self):
        self.db_path = "food_bot.db"
        self.init_database()
        self.setup_google_sheets()
        self.user_states = {}
        self.recognizer = sr.Recognizer()

    def setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            scopes = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ]
            
            creds = Credentials.from_service_account_file(
                os.getenv('GOOGLE_SHEETS_CREDENTIALS'),
                scopes=scopes
            )
            
            self.gc = gspread.authorize(creds)
            self.sheet_name = os.getenv('SHEET_NAME', 'FoodOrders')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
            try:
                self.sheet = self.gc.open(self.sheet_name).sheet1
            except gspread.SpreadsheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                spreadsheet = self.gc.create(self.sheet_name)
                self.sheet = spreadsheet.sheet1
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = [
                    'ID –∑–∞–∫–∞–∑–∞', '–î–∞—Ç–∞', '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å',
                    '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–¢–æ–≤–∞—Ä—ã', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                ]
                self.sheet.append_row(headers)
                
                # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                spreadsheet.share(None, perm_type='anyone', role='reader')
                
            logging.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.sheet = None

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                display_order INTEGER DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–ª—é–¥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS dishes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                name TEXT NOT NULL,
                description TEXT,
                weight TEXT,
                calories TEXT,
                storage_conditions TEXT,
                cooking_method TEXT,
                price INTEGER NOT NULL,
                image_path TEXT,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user_name TEXT,
                phone TEXT,
                address TEXT,
                total_amount INTEGER,
                status TEXT DEFAULT 'pending',
                payment_status TEXT DEFAULT 'unpaid',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                dish_id INTEGER,
                quantity INTEGER,
                price INTEGER,
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (dish_id) REFERENCES dishes (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payment_details (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bank_name TEXT,
                account_number TEXT,
                recipient_name TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                amount INTEGER,
                screenshot_path TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (order_id) REFERENCES orders (id)
            )
        ''')
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT COUNT(*) FROM categories')
        if cursor.fetchone()[0] == 0:
            initial_categories = [
                ('–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞', 1),
                ('–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞', 2),
                ('–ú–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –°—Ç—ç–π–∫–∏', 3)
            ]
            cursor.executemany('INSERT INTO categories (name, display_order) VALUES (?, ?)', initial_categories)
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            cursor.execute('''
                INSERT INTO payment_details (bank_name, account_number, recipient_name) 
                VALUES (?, ?, ?)
            ''', ('–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '0000 0000 0000 0000', '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'))
            
            # –ü—Ä–∏–º–µ—Ä –±–ª—é–¥
            sample_dishes = [
                (1, '–ë–æ—Ä—â', '–ê—Ä–æ–º–∞—Ç–Ω—ã–π –±–æ—Ä—â —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π', '400–≥', '150 –∫–∫–∞–ª', 
                 '+4¬∞C', '–†–∞–∑–æ–≥—Ä–µ—Ç—å 5 –º–∏–Ω—É—Ç', 250, 'images/borscht.jpg'),
                (2, '–¢—É—à–µ–Ω–∫–∞ –≥–æ–≤—è–∂—å—è', '–ù–µ–∂–Ω–∞—è —Ç—É—à–µ–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞', '300–≥', '200 –∫–∫–∞–ª',
                 '+4¬∞C', '–†–∞–∑–æ–≥—Ä–µ—Ç—å 3 –º–∏–Ω—É—Ç—ã', 350, 'images/beef_stew.jpg'),
                (3, '–¢–æ–º–æ–≥–∞–≤–∫', '–°–æ—á–Ω—ã–π —Å—Ç–µ–π–∫ —Ç–æ–º–∞–≥–∞–≤–∫', '500–≥', '350 –∫–∫–∞–ª',
                 '-18¬∞C', '–ñ–∞—Ä–∏—Ç—å 8-10 –º–∏–Ω—É—Ç', 1200, 'images/tomahawk.jpg')
            ]
            cursor.executemany('''
                INSERT INTO dishes (category_id, name, description, weight, calories, 
                storage_conditions, cooking_method, price, image_path) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', sample_dishes)
        
        conn.commit()
        conn.close()

    async def convert_voice_to_text(self, voice_file):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_data = await voice_file.download_as_bytearray()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav
            audio = AudioSegment.from_ogg(io.BytesIO(voice_data))
            wav_data = io.BytesIO()
            audio.export(wav_data, format="wav")
            wav_data.seek(0)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            with sr.AudioFile(wav_data) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language="ru-RU")
                return text
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
            return None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("üçΩÔ∏è –ú–µ–Ω—é", callback_data="menu")],
            [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
            [InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–∫–∞–∑", callback_data="voice_order")]
        ]
        
        if user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üçñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è –§–£–î!\n"
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ç–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é üçΩÔ∏è\n"
            "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–æ–ª–æ—Å–æ–º üé§\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É üõí\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def voice_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–∫–∞–∑**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –ø—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *'–î–≤–∞ –±–æ—Ä—â–∞, –æ–¥–Ω—É —Ç—É—à–µ–Ω–∫—É –∏ —Å—Ç–µ–π–∫ —Ç–æ–º–∞–≥–∞–≤–∫'*\n\n"
            "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É."
        )
        
        context.user_data['waiting_voice'] = True

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not context.user_data.get('waiting_voice'):
            return
            
        voice = update.message.voice
        voice_file = await voice.get_file()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
        text = await self.convert_voice_to_text(voice_file)
        
        if text:
            await processing_msg.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: *{text}*", parse_mode='Markdown')
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            result = await self.parse_voice_order(text, context)
            await update.message.reply_text(result)
        else:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        context.user_data['waiting_voice'] = False

    async def parse_voice_order(self, text: str, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP)
            text_lower = text.lower()
            added_items = []
            
            # –°–ø–∏—Å–æ–∫ –±–ª—é–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            dishes = self.get_all_dishes()
            
            for dish_id, dish_name, dish_price in dishes:
                dish_name_lower = dish_name.lower()
                
                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                if dish_name_lower in text_lower:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    quantity = 1
                    words = text_lower.split()
                    
                    for i, word in enumerate(words):
                        if word.isdigit() and i < len(words) - 1:
                            if words[i + 1] in dish_name_lower.split():
                                quantity = int(word)
                                break
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                    if 'cart' not in context.user_data:
                        context.user_data['cart'] = {}
                    
                    cart = context.user_data['cart']
                    dish_key = str(dish_id)
                    
                    if dish_key in cart:
                        cart[dish_key]['quantity'] += quantity
                    else:
                        cart[dish_key] = {
                            'name': dish_name,
                            'price': dish_price,
                            'quantity': quantity
                        }
                    
                    added_items.append(f"{dish_name} x{quantity}")
            
            if added_items:
                items_text = "\n".join(f"‚Ä¢ {item}" for item in added_items)
                return f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{items_text}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–∑–∏–Ω—É üõí"
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é üçΩÔ∏è"
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é üçΩÔ∏è"

    def get_all_dishes(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, name, price FROM dishes')
        dishes = cursor.fetchall()
        conn.close()
        return dishes

    async def handle_payment_screenshot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        if context.user_data.get('waiting_payment'):
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            file_path = f"payment_screenshots/{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            os.makedirs("payment_screenshots", exist_ok=True)
            await file.download_to_drive(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order_id = context.user_data['current_order_id']
            self.update_order_payment_status(order_id, 'paid', file_path)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self.notify_admins_about_payment(context.bot, order_id, user_id, file_path)
            
            await update.message.reply_text(
                "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏ —Å–∫–æ—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à –∑–∞–∫–∞–∑.\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è"
            )
            
            context.user_data['waiting_payment'] = False

    async def notify_admins_about_payment(self, bot, order_id, user_id, screenshot_path):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ"""
        order_info = self.get_order_info(order_id)
        
        if not order_info:
            return
        
        message_text = (
            "üí∞ **–ù–û–í–ê–Ø –û–ü–õ–ê–¢–ê!**\n\n"
            f"üìã –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_info['user_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_info['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order_info['address']}\n"
            f"üíµ –°—É–º–º–∞: {order_info['total_amount']}‚ÇΩ\n\n"
            "‚úÖ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await bot.send_message(admin_id, message_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                with open(screenshot_path, 'rb') as photo:
                    await bot.send_photo(admin_id, photo, caption="–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã")
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                                          callback_data=f"confirm_payment_{order_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                                          callback_data=f"reject_payment_{order_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await bot.send_message(
                    admin_id,
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    async def confirm_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()
        
        order_id = int(query.data.split('_')[-1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        self.update_order_payment_status(order_id, 'confirmed')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_info = self.get_order_info(order_id)
        if order_info:
            try:
                await context.bot.send_message(
                    order_info['user_id'],
                    "üéâ **–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n"
                    "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –∫—É—Ö–Ω—é. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        await query.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

    def update_order_payment_status(self, order_id, status, screenshot_path=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE orders SET payment_status = ? WHERE id = ?
        ''', (status, order_id))
        
        if screenshot_path:
            cursor.execute('''
                INSERT INTO payments (order_id, amount, screenshot_path, status)
                VALUES (?, ?, ?, ?)
            ''', (order_id, self.get_order_total(order_id), screenshot_path, status))
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
        self.update_google_sheets(order_id)

    def update_google_sheets(self, order_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets"""
        if not self.sheet:
            return
            
        try:
            order_info = self.get_order_info(order_id)
            if not order_info:
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            order_items = self.get_order_items(order_id)
            items_text = ", ".join([f"{item['name']} x{item['quantity']}" for item in order_items])
            
            row_data = [
                order_id,
                order_info['created_at'],
                order_info['user_name'],
                order_info['phone'],
                order_info['address'],
                order_info['total_amount'],
                order_info['status'],
                order_info['payment_status'],
                items_text,
                order_info['user_id']
            ]
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            try:
                cell = self.sheet.find(str(order_id))
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                for i, value in enumerate(row_data, 1):
                    self.sheet.update_cell(cell.row, i, value)
            except gspread.exceptions.CellNotFound:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                self.sheet.append_row(row_data)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")

    def get_order_info(self, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, user_name, phone, address, total_amount, status, payment_status, created_at
            FROM orders WHERE id = ?
        ''', (order_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'user_id': result[0],
                'user_name': result[1],
                'phone': result[2],
                'address': result[3],
                'total_amount': result[4],
                'status': result[5],
                'payment_status': result[6],
                'created_at': result[7]
            }
        return None

    def get_order_items(self, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT d.name, oi.quantity, oi.price
            FROM order_items oi
            JOIN dishes d ON oi.dish_id = d.id
            WHERE oi.order_id = ?
        ''', (order_id,))
        items = cursor.fetchall()
        conn.close()
        
        return [{'name': item[0], 'quantity': item[1], 'price': item[2]} for item in items]

    def get_order_total(self, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT total_amount FROM orders WHERE id = ?', (order_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: show_menu, show_category_dishes, show_dish_details, 
    # handle_quantity_change, add_to_cart, view_cart, checkout, handle_checkout_input, finalize_order, etc.)

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(self.show_menu, pattern="^menu$"))
        application.add_handler(CallbackQueryHandler(self.show_category_dishes, pattern="^category_"))
        application.add_handler(CallbackQueryHandler(self.show_dish_details, pattern="^dish_"))
        application.add_handler(CallbackQueryHandler(self.handle_quantity_change, pattern="^(increase|decrease)$"))
        application.add_handler(CallbackQueryHandler(self.add_to_cart, pattern="^add_to_cart$"))
        application.add_handler(CallbackQueryHandler(self.view_cart, pattern="^view_cart$"))
        application.add_handler(CallbackQueryHandler(self.checkout, pattern="^checkout$"))
        application.add_handler(CallbackQueryHandler(self.clear_cart, pattern="^clear_cart$"))
        application.add_handler(CallbackQueryHandler(self.show_admin_panel, pattern="^admin_panel$"))
        application.add_handler(CallbackQueryHandler(self.admin_change_payment, pattern="^admin_change_payment$"))
        application.add_handler(CallbackQueryHandler(self.back_to_main, pattern="^back_to_main$"))
        application.add_handler(CallbackQueryHandler(self.show_contacts, pattern="^contacts$"))
        application.add_handler(CallbackQueryHandler(self.voice_order, pattern="^voice_order$"))
        application.add_handler(CallbackQueryHandler(self.confirm_payment, pattern="^confirm_payment_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_checkout_input))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_admin_input))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo_address))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_payment_screenshot))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    bot = FoodBot()
    bot.setup_handlers(application)
    
    print("üçñ –ë–æ—Ç –§–£–î –∑–∞–ø—É—â–µ–Ω —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ Google Sheets!")
    application.run_polling()

if __name__ == "__main__":
    main()